syntax = "proto3";

package sync;

option go_package = "github.com/havoc-io/mutagen/pkg/sync";

import "google/protobuf/timestamp.proto";

// CacheEntry represents cache data for a file on disk.
message CacheEntry {
    // Mode stores the value of the Go os package's FileMode type. The meaning
    // of this value is defined to be stable (even if we'd have to implement its
    // computation ourselves when porting to another language), so it's safe to
    // use, and it's a relatively sane implementation based on POSIX mode bits.
    // This information is currently used in scans and transitions, but only the
    // type and executability bits are really used (or at least necessary) at
    // the moment. It's not clear whether or not we'll eventually need the other
    // permission bits, and it might be possible to get away with a type
    // enumeration instead. This might be easier than trying to replicate
    // FileMode values if moving to another language, though I'm not sure that
    // would be too difficult. But I suppose it's better to just have this
    // additional mode information available for the sake of generality and
    // extensibility. We can always drop it later, but we can't add it back. It
    // may (I'm not exactly sure how) come in useful if we want to implement
    // permission propagation or need a better change detection heuristic. At
    // the moment though, it's highly unlikely that we'll switch away from Go,
    // and I'm willing to live with this slightly "unclean" design, especially
    // given its potential and the relative ease of deprecating it if necessary.
    uint32 mode = 1;

    // ModificationTime is the cached modification time.
    google.protobuf.Timestamp modificationTime = 2;

    // Size is the cached size.
    uint64 size = 3;

    // FileID is the file identifier. On POSIX systems it is the inode number.
    // On Windows it is currently 0.
    uint64 fileID = 4;

    // Fields 5-8 are reserved for future common metadata.

    // Digest is the cached digest for file entries.
    bytes digest = 9;
}

// Cache provides a store for file metadata and digets to allow for efficient
// rescans.
message Cache {
    // Entries is a map from scan path to cache entry.
    map<string, CacheEntry> entries = 1;
}

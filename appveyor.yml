# Set the build version.
version: "{build}"

# Set the build image.
image: Visual Studio 2017

# Set the clone folder so that Mutagen ends up in the GOPATH.
clone_folder: C:\mutagen

# Set Go versions and environment variables.
environment:
  GOROOT: C:\go112
  GO111MODULE: "on"
  MINGW_PATH: C:\mingw-w64\x86_64-7.2.0-posix-seh-rt_v5-rev1
  MUTAGEN_TEST_END_TO_END: "full"
  MUTAGEN_TEST_DOCKER: "true"
  MUTAGEN_TEST_DOCKER_IMAGE_NAME: mutagentest
  MUTAGEN_TEST_DOCKER_CONTAINER_NAME: mutagentester
  MUTAGEN_TEST_DOCKER_USERNAME: george
init:
  - set PATH=%GOROOT%\bin;%MINGW_PATH%\mingw64\bin;%PATH%

# Disable AppVeyor's default Visual Studio build system.
build: off

# Perform setup for testing. We have to manually install the codecov.io
# Python-based uploading tool since there's no (simple) way to run the Bash
# version on Windows. We also create test partitions and set up Docker.
before_test:
  - pip install codecov
  - diskpart /s scripts\create_test_partitions_windows.txt
  - set MUTAGEN_TEST_FAT32_ROOT=V:\
  - scripts\setup_docker.bat

# Run tests, upload the coverage report, and build bundles.
#
# We have to run a quick build (for the current platform only) before running
# tests because the tests rely on the agent bundle being available. We may need
# to switch this to a testing build if we start invoking Docker from Windows
# with Linux containers. We don't want to do a full build to start with though
# because that can take a while.
#
# We run a few different testing cycles. The first is our primary test cycle for
# behavior and coverage reports. The second test cycle enables race detection,
# but we use a smaller synchronization root for integration tests in this case
# because the tests incur about an order-of-magnitude slowdown due to the race
# detector. The third test cycle is for the 386 architecture (where race
# detection isn't available anyway).
#
# We fold coverage report uploading into test_script because after_test doesn't
# seem to fail the build if an upload fails (which we want to do).
test_script:
  - go version
  - go run scripts/build.go --mode=slim
  - go test -p 1 -v -coverpkg=./pkg/... -coverprofile=coverage.txt ./pkg/...
  - set MUTAGEN_TEST_END_TO_END=slim
  - go test -p 1 -race ./pkg/...
  - set MUTAGEN_TEST_END_TO_END=full
  - set GOARCH=386
  - go run scripts/build.go --mode=slim
  - go test -p 1 ./pkg/...
  - set GOARCH=amd64
  - codecov -X gcov -f coverage.txt
  - go run scripts/build.go --mode=testing

# Perform teardown after testing. We tear down any Docker infrastructure that
# we've set up.
after_test:
  - scripts\teardown_docker.bat

# Send notifications.
notifications:
  - provider: Email
    to:
      - jacob@havoc.io
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
